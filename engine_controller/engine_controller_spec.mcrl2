act
	r_turn_on, s_turn_on, c_turn_on: Nat # Bool;
	r_check_off, s_check_off, c_check_off: Nat # Bool;
	r_fuel_check, s_fuel_check, c_fuel_check: Nat # Bool;
	r_ready_fix, s_ready_fix, c_ready_fix: Nat # Bool;
	r_ready_check, s_ready_check, c_ready_check: Nat # Bool;
	check_ready: Nat # Bool;
	turn_on: Nat # Bool;
	check_off: Nat # Bool;
	check_fuel: Nat # Bool;
	ready_fix: Nat # Bool;

proc
	EC = sum n: Nat . (n >= 0 && n <= 5) -> sum b: Bool . b -> (r_turn_on(n,b) . TurnOn(n,b) + r_check_off(n,b) . CheckOff(n,b) + r_fuel_check(n,b) . FuelCheck(n,b) + r_ready_fix(n,b) . ReadyFix(n,b) + r_ready_check(n,b) . ReadyCheck(n,b));
	
	TurnOn(n: Nat, b: Bool) 		= turn_on(n,b) . s_turn_on(n,b) . CC;
	CheckOff(n: Nat, b: Bool) 		= check_off(n,b) . s_check_off(n,b) . CC;
	FuelCheck(n: Nat, b: Bool) 		= check_fuel(n,b) . s_fuel_check(n,b) . CC;
	ReadyFix(n: Nat, b: Bool) 		= ready_fix(n,b) . s_ready_fix(n,b) . CC;
	ReadyCheck(n: Nat, b: Bool) 	= check_ready(n,b) . s_ready_check(n,b) . CC;

	CC = sum n: Nat . (n >= 0 && n <= 5) -> sum b: Bool . b -> (s_turn_on(n,b) + s_check_off(n,b) + s_fuel_check(n,b) + s_ready_fix(n,b) + s_ready_check(n,b)) . EC;

init
	allow({c_turn_on, c_check_off, c_fuel_check, c_ready_fix, c_ready_check, check_ready, turn_on, check_off, check_fuel, ready_fix},
	comm({r_turn_on|s_turn_on -> c_turn_on,
			r_check_off|s_check_off -> c_check_off,
			r_fuel_check|s_fuel_check -> c_fuel_check,
			r_ready_fix|s_ready_fix -> c_ready_fix,
			r_ready_check|s_ready_check -> c_ready_check},
	EC || CC));