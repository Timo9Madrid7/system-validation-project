act
	r_power, s_power, c_power: Nat # Bool;
	r_requestcheckfuel, s_requestcheckfuel, c_requestcheckfuel: Nat;
	r_responsecheckfuel, s_responsecheckfuel, c_responsecheckfuel: Nat # Bool;
	r_requestfix, s_requestfix, c_requestfix: Nat;
	r_requestcheck, s_requestcheck, c_requestcheck: Nat;
	r_responsecheck, s_responsecheck, c_responsecheck: Nat # Bool;

	check: Nat # Nat;
	fix: Nat;
	power: Nat # Bool;
	checkfuel: Nat;

proc
	EC 								= EC_requestcheck + sum module: Nat.(module <= 1) -> (EC_requestfix(module) + EC_checkfuel(module) + EC_power(module));

	EC_checkfuel(module: Nat) 		= sum b: Bool . r_requestcheckfuel(module) . checkfuel(module) . s_responsecheckfuel(module,b) . EC;
	EC_power(module: Nat) 			= sum b: Bool . r_power(module,b) . power(module,b) . s_power(module,b). EC;
	EC_requestcheck 				= r_requestcheck(3) . ( 
										sum m0: Bool . ( 
											check(3,0) .
											m0 -> sum m1: Bool . ( 
												check(3,1) . 
												m1 -> s_responsecheck(3, true) <> 
												s_responsecheck(3, false)
											) <> s_responsecheck(3, false)
										)
									) . EC;
    EC_requestfix(module: Nat) 		= r_requestfix(module) . fix(module) . sum b: Bool . (s_responsecheck(3, b)) . EC;

init
EC;
	%allow({c_power, c_requestcheckfuel, c_responsecheckfuel, c_requestfix, c_requestcheck, c_responsecheck, check, fix, power, checkfuel},
	%comm({	r_power|s_power -> c_power,
	%		r_requestcheckfuel|s_requestcheckfuel -> c_requestcheckfuel,
	%		r_responsecheckfuel|s_responsecheckfuel -> c_responsecheckfuel,
	%		r_requestfix|s_requestfix -> c_requestfix,
	%		r_requestcheck|s_requestcheck -> c_requestcheck,
	%		r_responsecheck|s_responsecheck -> c_responsecheck},
	%EC));